openapi: 3.0.3
info:
  title: Book Manager
  description: |-
    Service which will manage Books in the system and provide an API to expose them
  version: 1.0.11
tags:
  - name: books
    description: Books API
paths:
  /api/v1/books:
    get:
      tags:
        - books
      summary:  Get all books
      description: Get paginated list of all books existing in the system
      operationId: getAllBooks
      responses:
        '200':
          description: Returned successufully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBooksDto'
    post:
      tags:
        - books
      summary:  Create new book
      description: Add new book into the system
      operationId: addBook
      requestBody:
        description: Add book information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBookRequest'
        required: true
      responses:
        '201':
          description: Added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddBookResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestDto'
  /api/v1/books/{bookId}:
    get:
      tags:
        - books
      summary: Get book by id
      description: Get existing book by id
      operationId: getBookById
      parameters:
        - name: bookId
          in: path
          description: ID of book to get
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDto'
        '404':
          description: Book not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
    put:
      tags:
        - books
      summary: Update book by id
      description: Update existing book by id
      operationId: updateBookById
      parameters:
        - name: bookId
          in: path
          description: ID of book to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update book
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBookRequest'
      responses:
        '200':
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestDto'
        '404':
          description: Book not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
    delete:
      tags:
        - books
      summary: Delete book by id
      description: Delete existing book
      operationId: deleteBookById
      parameters:
        - name: bookId
          in: path
          description: ID of book to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Deleted successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestDto'
        '404':
          description: Book not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
components:
  schemas:
    NotFoundDto:
      type: object
      properties:
        error:
          type: string
          example: Not Found
        errorMessage:
          type: string
          example: Book with id 5de8b415-80a0-4e35-afbb-90467724d835 not found
    BadRequestDto:
      type: object
      properties:
        error:
          type: string
          example: Bad request
        errorMessages:
          type: array
          items:
            type: object
          example: ["lastName : must not be blank"]
    AddBookRequest:
      type: object
      required:
        - title
        - price
        - author
        - cover
      properties:
        title:
          type: string
          example: Three Comrads
        author:
          type: string
          example: Erich Maria Remarque
        price:
          type: string
          example: 100
        cover:
          type: string
          enum: [HARDCOVER, PAPERBACK]
    AddBookResponse:
      type: object
      properties:
        id:
          type: string
          example: 2df5278e-f2b3-4fe6-b722-9e2287a47330
    PaginatedBooksDto:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BookDto'
        page:
          type: integer
          example: 0
        size:
          type: integer
          example: 10
    BookDto:
      type: object
      properties:
        id:
          type: string
          example: Three Comrads
        title:
          type: string
          example: Three Comrads
        author:
          type: string
          example: Erich Maria Remarque
        price:
          type: string
          example: 100
        cover:
          type: string
          enum: [HARDCOVER, PAPERBACK]